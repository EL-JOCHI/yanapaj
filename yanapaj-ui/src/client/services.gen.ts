// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { GetTaskByIdData, GetTaskByIdError, GetTaskByIdResponse, UpdateTaskData, UpdateTaskError, UpdateTaskResponse, DeleteTaskData, DeleteTaskError, DeleteTaskResponse, GetTasksData, GetTasksError, GetTasksResponse, CreateTaskData, CreateTaskError, CreateTaskResponse, SignupData, SignupError, SignupResponse, LogoutError, LogoutResponse, LoginData, LoginError, LoginResponse } from './types.gen';

export const client = createClient(createConfig());

export class TaskControllerService {
    public static getTaskById<ThrowOnError extends boolean = false>(options: Options<GetTaskByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTaskByIdResponse, GetTaskByIdError, ThrowOnError>({
            ...options,
            url: '/api/v1/tasks/{id}'
        });
    }
    
    public static updateTask<ThrowOnError extends boolean = false>(options: Options<UpdateTaskData, ThrowOnError>) {
        return (options?.client ?? client).put<UpdateTaskResponse, UpdateTaskError, ThrowOnError>({
            ...options,
            url: '/api/v1/tasks/{id}'
        });
    }
    
    public static deleteTask<ThrowOnError extends boolean = false>(options: Options<DeleteTaskData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteTaskResponse, DeleteTaskError, ThrowOnError>({
            ...options,
            url: '/api/v1/tasks/{id}'
        });
    }
    
    public static getTasks<ThrowOnError extends boolean = false>(options?: Options<GetTasksData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTasksResponse, GetTasksError, ThrowOnError>({
            ...options,
            url: '/api/v1/tasks'
        });
    }
    
    public static createTask<ThrowOnError extends boolean = false>(options: Options<CreateTaskData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateTaskResponse, CreateTaskError, ThrowOnError>({
            ...options,
            url: '/api/v1/tasks'
        });
    }
    
}

export class AuthenticationControllerService {
    public static signup<ThrowOnError extends boolean = false>(options: Options<SignupData, ThrowOnError>) {
        return (options?.client ?? client).post<SignupResponse, SignupError, ThrowOnError>({
            ...options,
            url: '/api/v1/auth/signup'
        });
    }
    
    public static logout<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).post<LogoutResponse, LogoutError, ThrowOnError>({
            ...options,
            url: '/api/v1/auth/logout'
        });
    }
    
    public static login<ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) {
        return (options?.client ?? client).post<LoginResponse, LoginError, ThrowOnError>({
            ...options,
            url: '/api/v1/auth/login'
        });
    }
    
}